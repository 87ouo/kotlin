FILE fqName:<root> fileName:/varChangingType.kt
  CLASS INTERFACE name:A modality:ABSTRACT visibility:public superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.A
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      VALUE_PARAMETER name:other index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
  CLASS INTERFACE name:B modality:ABSTRACT visibility:public superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.B
    FUN name:next visibility:public modality:ABSTRACT <> ($this:<root>.B) returnType:<root>.B?
      $this: VALUE_PARAMETER name:<this> type:<root>.B
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      VALUE_PARAMETER name:other index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
  FUN name:foo visibility:public modality:FINAL <> (s:<root>.A) returnType:kotlin.Unit
    VALUE_PARAMETER name:s index:0 type:<root>.A
    BLOCK_BODY
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=<root>.B
            GET_VAR 's: <root>.A declared in <root>.foo' type=<root>.A origin=null
          then: RETURN type=kotlin.Nothing from='public final fun foo (s: <root>.A): kotlin.Unit declared in <root>'
            GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
      VAR name:ss type:<root>.B? [var]
        TYPE_OP type=<root>.B origin=IMPLICIT_CAST typeOperand=<root>.B
          GET_VAR 's: <root>.A declared in <root>.foo' type=<root>.A origin=null
      WHILE label=null origin=WHILE_LOOP
        condition: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: TYPE_OP type=<root>.A origin=IMPLICIT_CAST typeOperand=<root>.A
              GET_VAR 'var ss: <root>.B? [var] declared in <root>.foo' type=<root>.B? origin=null
            arg1: CONST Null type=kotlin.Nothing? value=null
        body: BLOCK type=kotlin.Unit origin=WHILE_LOOP
          SET_VAR 'var ss: <root>.B? [var] declared in <root>.foo' type=kotlin.Unit origin=EQ
            CALL 'public abstract fun next (): <root>.B? declared in <root>.B' type=<root>.B? origin=null
              $this: TYPE_OP type=<root>.B origin=IMPLICIT_CAST typeOperand=<root>.B
                GET_VAR 'var ss: <root>.B? [var] declared in <root>.foo' type=<root>.B? origin=null
